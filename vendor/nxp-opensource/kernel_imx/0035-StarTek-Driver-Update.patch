From 372d87ac9b354d8187c936cad7e8a8e264e1c0b5 Mon Sep 17 00:00:00 2001
From: "Nadav (NG) Greenberg" <NadavG@Sysmop.com>
Date: Tue, 6 Oct 2020 16:50:31 +0300
Subject: [PATCH 35/45] StarTek-Driver-Update

---
 drivers/gpu/drm/panel/panel-startek-kd070hdf.c | 121 ++++++++++++-------------
 1 file changed, 57 insertions(+), 64 deletions(-)

diff --git a/drivers/gpu/drm/panel/panel-startek-kd070hdf.c b/drivers/gpu/drm/panel/panel-startek-kd070hdf.c
index 6f905127f494..b8de144bc716 100644
--- a/drivers/gpu/drm/panel/panel-startek-kd070hdf.c
+++ b/drivers/gpu/drm/panel/panel-startek-kd070hdf.c
@@ -30,18 +30,29 @@
 #include <drm/drm_panel.h>
 #include <drm/drm_print.h>
 
+#define   PCLOCK          51206
+
+#define   LCD_XSIZE_TFT   1024
+#define   LCD_YSIZE_TFT   600
+
+#define   LCD_HFPD        4
+#define   LCD_HSPW        200
+#define   LCD_HBPD        80
+
+#define   LCD_VFPD        4
+#define   LCD_VSPW        30
+#define   LCD_VBPD        10
+
 struct kd070hdf_panel {
 	struct drm_panel panel;
 	struct mipi_dsi_device *dsi;
 	struct backlight_device *backlight;
 	struct regulator *supply;
 
-int power;
-int reset;
+	int reset;
 
 	struct {
 #if 0
-		struct gpio_desc *power;
 		struct gpio_desc *reset;
 #endif
 		struct gpio_desc *updn;
@@ -50,42 +61,42 @@ int reset;
 };
 
 struct panel_instr {
-    struct cmd {
-                u8	cmd;
-                u8	data;
-            } cmd;
+	struct cmd {
+		u8	cmd;
+		u8	data;
+	} cmd;
 };
 
-#define MIPI_COMMAND_INSTR(_cmd, _data)		\
-    {						\
-            .cmd = {			\
-                .cmd = (_cmd),		\
-                .data = (_data),	\
-            },				\
-    }
+#define MIPI_COMMAND_INSTR(_cmd, _data)	\
+	{									\
+		.cmd = {						\
+			.cmd = (_cmd),				\
+			.data = (_data),			\
+		},								\
+	}
 
 static const struct panel_instr panel_init[] = {
-    MIPI_COMMAND_INSTR(0xB2,    0x40),
-    MIPI_COMMAND_INSTR(0x80,    0x58),
-    MIPI_COMMAND_INSTR(0x81,    0x47),
-    MIPI_COMMAND_INSTR(0x82,    0xD4),
-    MIPI_COMMAND_INSTR(0x83,    0x88),
-    MIPI_COMMAND_INSTR(0x84,    0xA9),
-    MIPI_COMMAND_INSTR(0x85,    0xC3),
-    MIPI_COMMAND_INSTR(0x86,    0x82),
+	MIPI_COMMAND_INSTR(0xB2,    0x40),
+	MIPI_COMMAND_INSTR(0x80,    0x58),
+	MIPI_COMMAND_INSTR(0x81,    0x47),
+	MIPI_COMMAND_INSTR(0x82,    0xD4),
+	MIPI_COMMAND_INSTR(0x83,    0x88),
+	MIPI_COMMAND_INSTR(0x84,    0xA9),
+	MIPI_COMMAND_INSTR(0x85,    0xC3),
+MIPI_COMMAND_INSTR(0x86,    0x82),
 };
 
 static int mipi_send_cmd_data(struct kd070hdf_panel *ctx, u8 cmd, u8 data)
 {
-    u8 buf[2] = { cmd, data };
-    int ret;
-
-    ret = mipi_dsi_dcs_write_buffer(ctx->dsi, buf, sizeof(buf));
-    if (ret < 0) {
-        dev_err(&ctx->dsi->dev,"%s:0x%x failed %d\n", __func__,cmd, ret);
-        return ret;
-    }
-    return 0;
+	u8 buf[2] = { cmd, data };
+	int ret;
+
+	ret = mipi_dsi_dcs_write_buffer(ctx->dsi, buf, sizeof(buf));
+	if (ret < 0) {
+		dev_err(&ctx->dsi->dev,"%s:0x%x failed %d\n", __func__,cmd, ret);
+		return ret;
+	}
+	return 0;
 }
 
 static inline struct kd070hdf_panel *panel_to_kd070hdf_panel(struct drm_panel *panel)
@@ -104,9 +115,6 @@ static int kd070hdf_panel_prepare(struct drm_panel *panel)
 		return ret;
 	}
 
-	gpio_set_value(ctx->power, 1);
-	msleep(20);
-
 	gpio_set_value(ctx->reset, 1);
 	msleep(1);
 	gpio_set_value(ctx->reset, 0);
@@ -120,7 +128,7 @@ static int kd070hdf_panel_prepare(struct drm_panel *panel)
 		ret = mipi_send_cmd_data(ctx, instr->cmd.cmd,
 						      instr->cmd.data);
 
-        printk("%s #: cmd/data/ret = %d: 0x%x/0x%x/%d\n",__func__,
+		printk("%s #: cmd/data/ret = %d: 0x%x/0x%x/%d\n",__func__,
 		i, instr->cmd.cmd, instr->cmd.data, ret);
 		if (ret)
 			return ret;
@@ -134,7 +142,6 @@ static int kd070hdf_panel_unprepare(struct drm_panel *panel)
 	struct kd070hdf_panel *ctx = panel_to_kd070hdf_panel(panel);
 
 	gpio_set_value(ctx->reset, 0);
-	gpio_set_value(ctx->power, 0);
 	regulator_disable(ctx->supply);
 
 	return 0;
@@ -170,22 +177,22 @@ static int kd070hdf_panel_disable(struct drm_panel *panel)
 
 /* Default timings */
 static const struct drm_display_mode default_mode = {
-	.clock		= 51206,
+	.clock			= PCLOCK,
 
-	.hdisplay	= 1024,
-	.hsync_start	= 1024 + 4,
-	.hsync_end	= 1024 + 4 + 200,
-	.htotal		= 1024 + 4 + 200 + 80,
+	.hdisplay		= LCD_XSIZE_TFT,
+	.hsync_start	= LCD_XSIZE_TFT + LCD_HFPD,
+	.hsync_end		= LCD_XSIZE_TFT + LCD_HFPD + LCD_HSPW,
+	.htotal			= LCD_XSIZE_TFT + LCD_HFPD + LCD_HSPW + LCD_HBPD,
 
-	.vdisplay	= 600,
-	.vsync_start	= 600 + 4,
-	.vsync_end	= 600 + 4 + 30,
-	.vtotal		= 600 + 4 + 30 + 10,
+	.vdisplay		= LCD_YSIZE_TFT,
+	.vsync_start	= LCD_YSIZE_TFT + LCD_VFPD,
+	.vsync_end		= LCD_YSIZE_TFT + LCD_VFPD + LCD_VSPW,
+	.vtotal			= LCD_YSIZE_TFT + LCD_VFPD + LCD_VSPW + LCD_VBPD,
 
-	.vrefresh	= 60,
+	.vrefresh		= 60,
 
-	.width_mm	= 154,
-	.height_mm	= 86,
+	.width_mm		= 154,
+	.height_mm		= 86,
 };
 
 static int kd070hdf_panel_get_modes(struct drm_panel *panel)
@@ -218,11 +225,11 @@ static int kd070hdf_panel_get_modes(struct drm_panel *panel)
 }
 
 static const struct drm_panel_funcs kd070hdf_panel_funcs = {
-	.get_modes	= kd070hdf_panel_get_modes,
 	.prepare	= kd070hdf_panel_prepare,
+	.unprepare	= kd070hdf_panel_unprepare,
 	.enable		= kd070hdf_panel_enable,
 	.disable	= kd070hdf_panel_disable,
-	.unprepare	= kd070hdf_panel_unprepare,
+	.get_modes	= kd070hdf_panel_get_modes,
 };
 
 static int kd070hdf_panel_dsi_probe(struct mipi_dsi_device *dsi)
@@ -259,20 +266,6 @@ static int kd070hdf_panel_dsi_probe(struct mipi_dsi_device *dsi)
 		dev_err(&dsi->dev, "Couldn't get panel reset pin available 1\n");
 		return ret;
 	}
-
-	ctx->power = of_get_named_gpio(dsi->dev.of_node, "power-gpio", 0);
-	if (!gpio_is_valid(ctx->power)) {
-		DRM_DEV_ERROR(&dsi->dev, "Couldn't get our power GPIO\n");
-		return -EINVAL;
-	}
-
-	ret = devm_gpio_request_one(&dsi->dev, ctx->power,
-		GPIOF_OUT_INIT_LOW, "kd7_power");
-
-	if (ret < 0) {
-		dev_err(&dsi->dev, "Couldn't get panel power pin available 1\n");
-		return ret;
-	}
 	/*
 	 * We don't change the state of that GPIO later on but we need
 	 * to force it into a low state.
-- 
2.11.0

