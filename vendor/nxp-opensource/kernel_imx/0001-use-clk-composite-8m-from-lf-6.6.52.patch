From 45a0a233e9462de09895c4cdb02f26312ae04393 Mon Sep 17 00:00:00 2001
From: Valentin Raevsky <valentin@compulab.co.il>
Date: Wed, 12 Mar 2025 14:38:57 +0200
Subject: [PATCH 1/5] use clk-composite-8m from lf-6.6.52

Signed-off-by: Valentin Raevsky <valentin@compulab.co.il>
---
 drivers/clk/imx/clk-composite-8m.c | 52 ++++--------------------------
 1 file changed, 7 insertions(+), 45 deletions(-)

diff --git a/drivers/clk/imx/clk-composite-8m.c b/drivers/clk/imx/clk-composite-8m.c
index b80b9cd698fd..0e25cdbf9442 100644
--- a/drivers/clk/imx/clk-composite-8m.c
+++ b/drivers/clk/imx/clk-composite-8m.c
@@ -158,25 +158,6 @@ static const struct clk_ops imx8m_clk_composite_divider_ops = {
 	.determine_rate = imx8m_divider_determine_rate,
 };
 
-#ifdef CONFIG_CLK_POWER_SAVE
-static char *m4_lpa_required_ccm_slices[ ] = {"audio_ahb","i2c3","sai1","sai2","sai3","sai5","uart4","gic","gpt1","pwm3","m7_core","arm_m4_core","audio_axi","ecspi2","dram_alt","dram_apb"};
-#endif
-
-static bool m4_lpa_required(const char *name){
-#ifdef CONFIG_CLK_POWER_SAVE
-	int i;
-
-	for(i = 0; i < sizeof(m4_lpa_required_ccm_slices) / sizeof(m4_lpa_required_ccm_slices[0]); i++){
-		if (strstr(m4_lpa_required_ccm_slices[i], name) != NULL)
-			return true;
-	}
-
-	return false;
-#else
-	return true;
-#endif
-}
-
 static u8 imx8m_clk_composite_mux_get_parent(struct clk_hw *hw)
 {
 	return clk_mux_ops.get_parent(hw);
@@ -264,12 +245,11 @@ struct clk_hw *__imx8m_clk_hw_composite(const char *name,
 	struct clk_mux *mux = NULL;
 	const struct clk_ops *divider_ops;
 	const struct clk_ops *mux_ops;
-	u32 val;
 	const struct clk_ops *gate_ops;
 
 	mux = kzalloc(sizeof(*mux), GFP_KERNEL);
 	if (!mux)
-		return ERR_CAST(hw);
+		goto fail;
 
 	mux_hw = &mux->hw;
 	mux->reg = reg;
@@ -279,7 +259,7 @@ struct clk_hw *__imx8m_clk_hw_composite(const char *name,
 
 	div = kzalloc(sizeof(*div), GFP_KERNEL);
 	if (!div)
-		goto free_mux;
+		goto fail;
 
 	div_hw = &div->hw;
 	div->reg = reg;
@@ -288,34 +268,18 @@ struct clk_hw *__imx8m_clk_hw_composite(const char *name,
 		div->width = PCG_CORE_DIV_WIDTH;
 		divider_ops = &clk_divider_ops;
 		mux_ops = &imx8m_clk_composite_mux_ops;
-		if (!(flags & CLK_IS_CRITICAL) && !(mcore_booted && m4_lpa_required(name))) {
-			val = readl(reg);
-			val &= ~BIT(PCG_CGC_SHIFT);
-			writel(val, reg);
-		}
 	} else if (composite_flags & IMX_COMPOSITE_BUS) {
 		div->shift = PCG_PREDIV_SHIFT;
 		div->width = PCG_PREDIV_WIDTH;
 		divider_ops = &imx8m_clk_composite_divider_ops;
 		mux_ops = &imx8m_clk_composite_mux_ops;
-		if (!(flags & CLK_IS_CRITICAL) && !(mcore_booted && m4_lpa_required(name))) {
-			val = readl(reg);
-			val &= ~BIT(PCG_CGC_SHIFT);
-			writel(val, reg);
-		}
 	} else {
 		div->shift = PCG_PREDIV_SHIFT;
 		div->width = PCG_PREDIV_WIDTH;
 		divider_ops = &imx8m_clk_composite_divider_ops;
 		mux_ops = &clk_mux_ops;
-		if (!(composite_flags & IMX_COMPOSITE_FW_MANAGED)){
+		if (!(composite_flags & IMX_COMPOSITE_FW_MANAGED))
 			flags |= CLK_SET_PARENT_GATE;
-			if (!(flags & CLK_IS_CRITICAL) && !(mcore_booted && m4_lpa_required(name))) {
-				val = readl(reg);
-				val &= ~BIT(PCG_CGC_SHIFT);
-				writel(val, reg);
-			}
-		}
 	}
 
 	div->lock = &imx_ccm_lock;
@@ -324,13 +288,13 @@ struct clk_hw *__imx8m_clk_hw_composite(const char *name,
 	/* skip registering the gate ops if M4 is enabled */
 	gate = kzalloc(sizeof(*gate), GFP_KERNEL);
 	if (!gate)
-		goto free_div;
+		goto fail;
 
 	gate_hw = &gate->hw;
 	gate->reg = reg;
 	gate->bit_idx = PCG_CGC_SHIFT;
 	gate->lock = &imx_ccm_lock;
-	if (!mcore_booted || !m4_lpa_required(name))
+	if (!mcore_booted)
 		gate_ops = &clk_gate_ops;
 	else
 		gate_ops = &imx8m_clk_composite_gate_ops;
@@ -339,15 +303,13 @@ struct clk_hw *__imx8m_clk_hw_composite(const char *name,
 			mux_hw, mux_ops, div_hw,
 			divider_ops, gate_hw, gate_ops, flags);
 	if (IS_ERR(hw))
-		goto free_gate;
+		goto fail;
 
 	return hw;
 
-free_gate:
+fail:
 	kfree(gate);
-free_div:
 	kfree(div);
-free_mux:
 	kfree(mux);
 	return ERR_CAST(hw);
 }
-- 
2.34.1

