From dcd3bbe3f2b0b708df873c5ed6ab54ff5ad844fd Mon Sep 17 00:00:00 2001
From: Valentin Raevsky <valentin@compulab.co.il>
Date: Thu, 10 Apr 2025 07:34:49 +0300
Subject: [PATCH 7/7] common: tools: Update imx-sdcard-partition.sh

Signed-off-by: Valentin Raevsky <valentin@compulab.co.il>
---
 common/tools/imx-sdcard-partition.sh | 74 +++++++++++++---------------
 1 file changed, 35 insertions(+), 39 deletions(-)

diff --git a/common/tools/imx-sdcard-partition.sh b/common/tools/imx-sdcard-partition.sh
index e4574862..cdadd309 100755
--- a/common/tools/imx-sdcard-partition.sh
+++ b/common/tools/imx-sdcard-partition.sh
@@ -1,5 +1,7 @@
 #!/bin/bash -e
 
+export PATH=${PWD}/out/host/linux-x86/bin:${PATH}
+
 help() {
 
 bn=`basename $0`
@@ -40,6 +42,14 @@ options:
   -D directory      specify the directory which contains the images to be flashed.
   -m                flash mcu image
   -o force_offset   force set uboot offset
+
+loop device support:
+    1) Create an 28G image file:
+    dd if=/dev/zero of=/path/to/a15.img bs=1M count=\$(( 29 * 1024 ))
+    NOTE: 29 is not a typo
+    2) Attache it to a loop device:
+    device_node=\$(sudo losetup --show --find --partscan /path/to/a15.img)
+
 EOF
 
 }
@@ -138,6 +148,12 @@ if [ ! -e ${node} ]; then
     exit 1
 fi
 
+# To calculate the block device partition prefix
+_tmp_name=$(basename ${node})
+_tmp_name=${_tmp_name:0:2}
+declare -A part_del=( ['lo']='p' ['mm']='p' )
+export p=${part_del[${_tmp_name:0:2}]:-""}
+
 # Process of the uboot_feature parameter
 if [[ "${uboot_feature}" = *"trusty"* ]] || [[ "${uboot_feature}" = *"secure"* ]]; then
     echo -e >&2 ${RED}Do not flash the image with Trusty OS to SD card${STD}
@@ -193,34 +209,7 @@ function get_partition_size
 
 function get_current_device_base_name
 {
-    if [ -z ${current_device_base_name} ]; then
-        #get the minor number of the node
-        node_device_major=`ls -l ${node} | awk '{print $5}'`
-        node_device_minor=`ls -l ${node} | awk '{print $6}'`
-        all_device_info=`ls -l ${node}*`
-
-        # use '\n' as delimiter
-        OLDIFS=$IFS
-        IFS=$'\n'
-        # find the first partition, and retrieve the base name
-        for current_device_info in $all_device_info ; do
-            current_device_major=`echo ${current_device_info} | awk '{print $5}'`
-            current_device_minor=`echo ${current_device_info} | awk '{print $6}'`
-            minor_difference=$[$current_device_minor - $node_device_minor]
-            if [ ${node_device_major} = ${current_device_major} ]; then
-                if [ 1 -eq $minor_difference ]; then
-                    current_device_base_name=`echo ${current_device_info} | awk '{print $10}'`
-                    current_device_base_name=${current_device_base_name%1}
-                    IFS=$OLDIFS
-                    return 0
-                fi
-            fi
-        done
-        # restore the delimeter
-        IFS=$OLDIFS
-        echo -e >&2 "${RED}Failed to find the first partition on ${node}.${STD}"
-        exit 1
-    fi
+    current_device_base_name=${node}
 }
 
 function format_partition
@@ -229,9 +218,9 @@ function format_partition
     if [ ${num} -gt 0 ] 2>/dev/null; then
         get_current_device_base_name
 
-        echo "format_partition: $1:${current_device_base_name}${num} ${2:-ext4}"
+        echo "format_partition: $1:${current_device_base_name}${p}${num} ${2:-ext4}"
         if [ "$2" != "f2fs" ]; then
-            mkfs.ext4 -F ${current_device_base_name}${num} -L$1
+            mkfs.ext4 -F ${current_device_base_name}${p}${num} -L$1
         else
             # check whether make_f2fs exists
             command -v make_f2fs >/dev/null 2>&1 || { echo -e >&2 "${RED}Missing make_f2fs, fallback to erase the $1 partition ${STD}" ; erase_partition $1 ; return ; }
@@ -240,7 +229,7 @@ function format_partition
             randome_part=$RANDOM
             # generate a sparse filesystem image with f2fs type and the size of the partition
             make_f2fs -S $(( g_sizes*1024*1024 )) -g android /tmp/TemporaryFile_${randome_part}
-            simg2img /tmp/TemporaryFile_${randome_part} ${current_device_base_name}${num}
+            simg2img /tmp/TemporaryFile_${randome_part} ${current_device_base_name}${p}${num}
             rm /tmp/TemporaryFile_${randome_part}
         fi
     fi
@@ -252,8 +241,8 @@ function erase_partition
     if [ ${num} -gt 0 ] 2>/dev/null; then
         get_current_device_base_name
         get_partition_size $1
-        echo "erase_partition: $1 : ${current_device_base_name}${num} ${g_sizes}M"
-        dd if=/dev/zero of=${current_device_base_name}${num} bs=1048576 conv=fsync,nocreat count=$g_sizes
+        echo "erase_partition: $1 : ${current_device_base_name}${p}${num} ${g_sizes}M"
+        dd if=/dev/zero of=${current_device_base_name}${p}${num} bs=1048576 conv=fsync,nocreat count=$g_sizes
     fi
 }
 
@@ -277,7 +266,7 @@ function flash_partition
             elif [ "$(echo ${1} | grep "product")" != "" ]; then
                 img_name=${product_file}
             elif [ ${support_dtbo} -eq 1 ] && [ $(echo ${1} | grep "boot") != "" ] 2>/dev/null; then
-                img_name="boot-imx.img"
+                img_name="boot.img"
             elif [ "$(echo ${1} | grep -E "dtbo|vbmeta|recovery")" != "" -a "${dtb_feature}" != "" ]; then
                 img_name="${1%_*}-${soc_name}-${dtb_feature}.img"
             elif [ "$(echo ${1} | grep "super")" != "" ]; then
@@ -291,15 +280,15 @@ function flash_partition
                 return 1
             fi
             get_current_device_base_name
-            echo "flash_partition: ${img_name} ---> ${current_device_base_name}${num}"
+            echo "flash_partition: ${img_name} ---> ${current_device_base_name}${p}${num}"
 
             if [ "$(echo ${1} | grep "vendor_boot")" != "" ]; then
-                dd if=${image_directory}${img_name} of=${current_device_base_name}${num} bs=10M conv=fsync,nocreat
+                dd if=${image_directory}${img_name} of=${current_device_base_name}${p}${num} bs=10M conv=fsync,nocreat
             elif [ "$(echo ${1} | grep "system")" != "" ] || [ "$(echo ${1} | grep "vendor")" != "" ] || \
                 [ "$(echo ${1} | grep "product")" != "" ] || [ "$(echo ${1} | grep "super")" != "" ]; then
-                simg2img ${image_directory}${img_name} ${current_device_base_name}${num}
+                simg2img ${image_directory}${img_name} ${current_device_base_name}${p}${num}
             else
-                dd if=${image_directory}${img_name} of=${current_device_base_name}${num} bs=10M conv=fsync,nocreat
+                dd if=${image_directory}${img_name} of=${current_device_base_name}${p}${num} bs=10M conv=fsync,nocreat
             fi
         fi
     done
@@ -398,6 +387,13 @@ function flash_android
         flash_partition ${super_partition} || exit 1
     fi
     echo "erase_partition: uboot : ${node}"
+    external_bootloader_file=external/flash.bin
+    if [ -e ${image_directory}/${external_bootloader_file} ]; then
+        bootloader_file=${external_bootloader_file}
+        echo "[NOTE]: using ${external_bootloader_file} is bootloader"
+    else
+        echo "[INFO]: if external bootloader is required; then provide it as ${external_bootloader_file} file"
+    fi
     echo "flash_partition: ${bootloader_file} ---> ${node}"
     first_partition_offset=`gdisk -l ${node} | grep ' 1 ' | awk '{print $2}'`
     # the unit of first_partition_offset is sector size which is 512 Byte.
@@ -422,7 +418,7 @@ if [ "${not_partition}" -ne "1" ] ; then
     make_partition || exit 1
     # unmount partitions and then force to re-read the partition table of the specified device
     sleep 3
-    for i in `cat /proc/mounts | grep "${node}" | awk '{print $2}'`; do umount $i; done
+    for i in `cat /proc/mounts | grep -w "${node}" | awk '{print $2}'`; do umount $i; done
     hdparm -z ${node}
     # backup the GPT table to last LBA for sd card. execute "gdisk ${node}" with the input characters
     # redirect standard OUTPUT to /dev/null to reduce some ouput
-- 
2.34.1

